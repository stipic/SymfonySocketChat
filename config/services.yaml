# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    storage_dir: 'storage'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    app_session_db_storage:
        class: Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler
        arguments:
            - 'mysql:dbname=chatter;'
            - { db_table: 'sessions', db_username: 'root', db_password: 'm11' }

    craue_config_cache_provider:
        class: Doctrine\Common\Cache\FilesystemCache
        public: false
        arguments:
            - '%kernel.cache_dir%'
            - 'craue_config'
            - 0

    app_conversation_socket:
        class: App\Topic\ConversationTopic
        arguments: ['@gos_web_socket.client.manipulator', '@doctrine.orm.entity_manager', '@security.authorization_checker', "@service_container"]
        tags:
            - { name: gos_web_socket.topic }

    conversation.topic:
        class: App\Topic\ConversationNotificationTopic
        arguments: ['@gos_web_socket.client.manipulator']
        tags:
            - { name: gos_web_socket.topic }

    app_online_users_socket:
        class: App\Topic\OnlineUserTopic
        arguments: ['@gos_web_socket.client.manipulator']
        tags:
            - { name: gos_web_socket.topic }

    app_doctrine_periodic_ping:
        class: App\Topic\Periodic\DoctrinePeriodicPing
        arguments: ['@doctrine.dbal.default_connection']
        tags:
            - { name: gos_web_socket.periodic }
    
    app_upload_listener:
        class: App\EventListener\ConversationUploadListener
        arguments: ["@doctrine.orm.entity_manager", "@security.authorization_checker", "@security.token_storage", "@parameter_bag", "@app_message_handler"]
        tags:
            - { name: kernel.event_listener, event: oneup_uploader.post_upload, method: afterUpload }
            - { name: kernel.event_listener, event: oneup_uploader.pre_upload, method: beforeUpload }

    app_upload_namer:
        public: true
        class: App\EventListener\UploadNamer
        # arguments: ["@security.token_storage"]

    app_message_handler:
        class: App\Service\MessageHandler
        arguments: ["@doctrine.orm.entity_manager", "@gos_web_socket.pusher.amqp", "@twig", "@app.message_parser"]
        public: true

    app_conversation_handler:
        class: App\Service\ConversationHandler
        arguments: ["@router", "@doctrine.orm.entity_manager", "@gos_web_socket.pusher.amqp", "@twig"]
        public: true

    app_user_unread_message_socket:
        class: App\Topic\UserUnreadMessageTopic
        arguments: ['@gos_web_socket.client.manipulator', "@doctrine.orm.entity_manager"]
        tags:
            - { name: gos_web_socket.topic }

    app_role_helper:
        public: true
        class: App\Security\RoleHelper
        bind:
            $roleHierarchy: '%security.role_hierarchy.roles%'
    
    app.message_parser:
        public: true
        class: App\EventListener\MessageParserListener
        arguments: ['@twig']
        tags:
            - { name: doctrine.event_listener, event: postLoad }